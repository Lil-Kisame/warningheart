import cv2
import mediapipe as mp
import pandas as pd
import numpy as np
import os
from tqdm import tqdm

# ==============================================================================
# THI·∫æT L·∫¨P MEDIAPIPE HOLISTIC
# ==============================================================================
mp_holistic = mp.solutions.holistic
mp_draw = mp.solutions.drawing_utils

holistic = mp_holistic.Holistic(
    static_image_mode=False,
    model_complexity=2,            # 1 ho·∫∑c 2 = ch√≠nh x√°c h∆°n
    smooth_landmarks=True,
    enable_segmentation=False,
    refine_face_landmarks=False,   # T·∫Øt face v√¨ ch·ªâ c·∫ßn pose + hand
    min_detection_confidence=0.3,  # Gi·∫£m ƒë·ªÉ d·ªÖ nh·∫≠n tay h∆°n
    min_tracking_confidence=0.6
)

# ==============================================================================
# H√ÄM TR√çCH XU·∫§T LANDMARKS
# ==============================================================================
def make_landmark_pose(results):
    """Tr·∫£ v·ªÅ list [x, y, z, visibility] cho 33 pose landmarks"""
    if not results.pose_landmarks:
        return None
    c_lm = []
    for lm in results.pose_landmarks.landmark:
        c_lm.extend([lm.x, lm.y, lm.z, lm.visibility])
    return c_lm

def make_landmark_hand_left(results):
    """Tr·∫£ v·ªÅ list [x, y, z] cho 21 left hand landmarks"""
    if not results.left_hand_landmarks:
        return None
    c_lm_hl = []
    for lm_hl in results.left_hand_landmarks.landmark:              
        c_lm_hl.extend([lm_hl.x, lm_hl.y, lm_hl.z])
    return c_lm_hl

def make_landmark_hand_right(results):
    """Tr·∫£ v·ªÅ list [x, y, z] cho 21 right hand landmarks"""
    if not results.right_hand_landmarks:
        return None
    c_lm_hr = []
    for lm_hr in results.right_hand_landmarks.landmark:
        c_lm_hr.extend([lm_hr.x, lm_hr.y, lm_hr.z])
    return c_lm_hr

def draw_all_landmarks(mp_drawing, results, img):
    """V·∫Ω t·∫•t c·∫£ landmarks l√™n frame"""
    if results.pose_landmarks:
        mp_drawing.draw_landmarks(
            img, results.pose_landmarks, mp_holistic.POSE_CONNECTIONS,
            mp_drawing.DrawingSpec(color=(245, 117, 66), thickness=2, circle_radius=2),
            mp_drawing.DrawingSpec(color=(245, 66, 230), thickness=2, circle_radius=1)
        )

    if results.left_hand_landmarks:
        mp_drawing.draw_landmarks(
            img, results.left_hand_landmarks, mp_holistic.HAND_CONNECTIONS,
            mp_drawing.DrawingSpec(color=(121, 22, 76), thickness=2, circle_radius=2),
            mp_drawing.DrawingSpec(color=(121, 44, 250), thickness=2, circle_radius=1)
        )
    
    if results.right_hand_landmarks:
        mp_drawing.draw_landmarks(
            img, results.right_hand_landmarks, mp_holistic.HAND_CONNECTIONS,
            mp_drawing.DrawingSpec(color=(245, 117, 66), thickness=2, circle_radius=2),
            mp_drawing.DrawingSpec(color=(245, 66, 230), thickness=2, circle_radius=1)
        )
    
    return img

# ==============================================================================
# H√ÄM X·ª¨ L√ù 1 VIDEO
# ==============================================================================
def process_single_video(video_path, output_csv, show_video=True, save_video=False, output_video_path=None):
    """
    X·ª≠ l√Ω 1 video v√† l∆∞u landmarks ra CSV
    
    Args:
        video_path: ƒê∆∞·ªùng d·∫´n video ƒë·∫ßu v√†o
        output_csv: ƒê∆∞·ªùng d·∫´n file CSV ƒë·∫ßu ra
        show_video: Hi·ªÉn th·ªã video trong qu√° tr√¨nh x·ª≠ l√Ω
        save_video: L∆∞u video ƒë√£ v·∫Ω landmarks
        output_video_path: ƒê∆∞·ªùng d·∫´n video ƒë·∫ßu ra
    """
    
    print(f"\n{'='*80}")
    print(f"üé• ƒêang x·ª≠ l√Ω: {video_path}")
    print(f"{'='*80}")
    
    # Ki·ªÉm tra file t·ªìn t·∫°i
    if not os.path.exists(video_path):
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file {video_path}")
        return None
    
    # M·ªü video
    cap = cv2.VideoCapture(video_path)
    
    if not cap.isOpened():
        print(f"‚ùå L·ªói: Kh√¥ng th·ªÉ m·ªü video")
        return None
    
    # L·∫•y th√¥ng tin video
    fps = int(cap.get(cv2.CAP_PROP_FPS))
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    
    print(f"\nüìä Th√¥ng tin video:")
    print(f"   - FPS: {fps}")
    print(f"   - Resolution: {width}x{height}")
    print(f"   - Total frames: {total_frames}")
    print(f"   - Duration: {total_frames/fps:.2f}s")
    
    # Kh·ªüi t·∫°o VideoWriter n·∫øu c·∫ßn l∆∞u video
    out = None
    if save_video and output_video_path:
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(output_video_path, fourcc, fps, (width, height))
        print(f"üíæ S·∫Ω l∆∞u video output v√†o: {output_video_path}")
    
    # Danh s√°ch l∆∞u landmarks
    lm_list = []
    
    frame_count = 0
    successful_pose = 0
    successful_left_hand = 0
    successful_right_hand = 0
    
    print(f"\nüîÑ ƒêang x·ª≠ l√Ω {total_frames} frames...")
    
    with tqdm(total=total_frames, desc="Progress", unit="frame") as pbar:
        while True:
            ret, frame = cap.read()
            
            if not ret:
                break
            
            frame_count += 1
            
            # Chuy·ªÉn BGR sang RGB
            frameRGB = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            
            # Detect landmarks
            result = holistic.process(frameRGB)
            
            # Tr√≠ch xu·∫•t landmarks
            pose_lm = make_landmark_pose(result)
            left_hand_lm = make_landmark_hand_left(result)
            right_hand_lm = make_landmark_hand_right(result)
            
            # Ch·ªâ l∆∞u n·∫øu c√≥ pose landmarks
            if pose_lm:
                row = []
                # Pose: 33 landmarks √ó 4 = 132 values
                row.extend(pose_lm)
                # Left hand: 21 landmarks √ó 3 = 63 values (ho·∫∑c zeros)
                row.extend(left_hand_lm if left_hand_lm else [0.0] * 63)
                # Right hand: 21 landmarks √ó 3 = 63 values (ho·∫∑c zeros)
                row.extend(right_hand_lm if right_hand_lm else [0.0] * 63)
                
                lm_list.append(row)
                
                # ƒê·∫øm s·ªë l·∫ßn detect th√†nh c√¥ng
                successful_pose += 1
                if left_hand_lm:
                    successful_left_hand += 1
                if right_hand_lm:
                    successful_right_hand += 1
            
            # V·∫Ω landmarks l√™n frame
            if show_video or save_video:
                frame = draw_all_landmarks(mp_draw, result, frame)
                
                # Hi·ªÉn th·ªã th√¥ng tin
                cv2.putText(frame, f"Frame: {frame_count}/{total_frames}", 
                           (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                cv2.putText(frame, f"Pose: {successful_pose}", 
                           (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                cv2.putText(frame, f"Left Hand: {successful_left_hand}", 
                           (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                cv2.putText(frame, f"Right Hand: {successful_right_hand}", 
                           (10, 120), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            
            # Hi·ªÉn th·ªã video
            if show_video:
                cv2.imshow("Holistic Detection", frame)
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    print("\n‚ö†Ô∏è Ng∆∞·ªùi d√πng d·ª´ng x·ª≠ l√Ω")
                    break
            
            # L∆∞u video
            if save_video and out:
                out.write(frame)
            
            pbar.update(1)
    
    # Gi·∫£i ph√≥ng resources
    cap.release()
    if out:
        out.release()
    if show_video:
        cv2.destroyAllWindows()
    
    # B√°o c√°o k·∫øt qu·∫£
    print(f"\n‚úÖ Ho√†n th√†nh x·ª≠ l√Ω!")
    print(f"   - T·ªïng frames: {frame_count}")
    print(f"   - Pose detected: {successful_pose} ({successful_pose/frame_count*100:.1f}%)")
    print(f"   - Left hand detected: {successful_left_hand} ({successful_left_hand/frame_count*100:.1f}%)")
    print(f"   - Right hand detected: {successful_right_hand} ({successful_right_hand/frame_count*100:.1f}%)")
    
    # L∆∞u CSV
    if len(lm_list) > 0:
        df = pd.DataFrame(lm_list)
        df.to_csv(output_csv, index=False)
        print(f"\nüíæ ƒê√£ l∆∞u {len(lm_list)} frames v√†o: {output_csv}")
        print(f"   - Shape: {df.shape}")
        print(f"   - Columns: {df.shape[1]} (132 pose + 63 left hand + 63 right hand)")
    else:
        print(f"\n‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c tr√≠ch xu·∫•t!")
    
    return df

# ==============================================================================
# H√ÄM X·ª¨ L√ù NHI·ªÄU VIDEO TRONG TH∆Ø M·ª§C
# ==============================================================================
def process_video_folder(folder_path, output_folder, label_name=None, show_video=False, save_videos=False):
    """
    X·ª≠ l√Ω t·∫•t c·∫£ video trong 1 th∆∞ m·ª•c
    
    Args:
        folder_path: ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a videos
        output_folder: Th∆∞ m·ª•c l∆∞u CSV
        label_name: T√™n nh√£n (d√πng l√†m prefix cho file)
        show_video: Hi·ªÉn th·ªã video trong qu√° tr√¨nh x·ª≠ l√Ω
        save_videos: L∆∞u video ƒë√£ v·∫Ω landmarks
    """
    
    print(f"\n{'='*80}")
    print(f"üìÅ X·ª¨ L√ù TH∆Ø M·ª§C: {folder_path}")
    print(f"{'='*80}")
    
    # T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
    os.makedirs(output_folder, exist_ok=True)
    
    # L·∫•y danh s√°ch video
    video_extensions = ['.mp4', '.avi', '.mov', '.mkv', '.MP4', '.AVI', '.MOV', '.MKV']
    video_files = [f for f in os.listdir(folder_path) 
                   if os.path.splitext(f)[1] in video_extensions]
    
    if len(video_files) == 0:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y video n√†o trong {folder_path}")
        return
    
    print(f"üìπ T√¨m th·∫•y {len(video_files)} video")
    
    # X·ª≠ l√Ω t·ª´ng video
    all_dataframes = []
    
    for idx, video_file in enumerate(video_files, 1):
        video_path = os.path.join(folder_path, video_file)
        video_name = os.path.splitext(video_file)[0]
        
        # T·∫°o t√™n file output
        if label_name:
            csv_filename = f"{label_name}_{idx}.csv"
            video_filename = f"{label_name}_{idx}_annotated.mp4"
        else:
            csv_filename = f"{video_name}.csv"
            video_filename = f"{video_name}_annotated.mp4"
        
        csv_output = os.path.join(output_folder, csv_filename)
        video_output = os.path.join(output_folder, video_filename) if save_videos else None
        
        print(f"\n{'='*80}")
        print(f"[{idx}/{len(video_files)}] {video_file}")
        print(f"{'='*80}")
        
        # X·ª≠ l√Ω video
        df = process_single_video(
            video_path,
            csv_output,
            show_video=show_video,
            save_video=save_videos,
            output_video_path=video_output
        )
        
        if df is not None and len(df) > 0:
            all_dataframes.append(df)
        else:
            print(f"‚ùå L·ªói x·ª≠ l√Ω video: {video_file}")
    
    # Merge t·∫•t c·∫£ CSV th√†nh 1 file
    if len(all_dataframes) > 0 and label_name:
        merged_df = pd.concat(all_dataframes, ignore_index=True)
        merged_path = os.path.join(output_folder, f"{label_name}_merged.csv")
        merged_df.to_csv(merged_path, index=False)
        print(f"\n{'='*80}")
        print(f"‚úÖ ƒê√£ merge {len(all_dataframes)} files th√†nh: {merged_path}")
        print(f"   - Total rows: {len(merged_df)}")
        print(f"{'='*80}")

# ==============================================================================
# MAIN - S·ª¨ D·ª§NG
# ==============================================================================
if __name__ == "__main__":
    
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           TR√çCH XU·∫§T HOLISTIC LANDMARKS T·ª™ VIDEO (POSE + HANDS)          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # ============== C·∫§U H√åNH ==============
    
    # OPTION 1: X·ª≠ l√Ω 1 video ƒë∆°n l·∫ª
    USE_SINGLE_VIDEO = True  # ƒê·ªïi th√†nh True ƒë·ªÉ x·ª≠ l√Ω 1 video
    
    if USE_SINGLE_VIDEO:
        VIDEO_PATH = "video/76621-559757958_tiny.mp4"  # ‚Üê ƒê·ªïi ƒë∆∞·ªùng d·∫´n video c·ªßa b·∫°n
        OUTPUT_CSV = "output/normal3.csv"  # ‚Üê ƒê∆∞·ªùng d·∫´n l∆∞u CSV
        OUTPUT_VIDEO = "output/normal1_video.mp4"  # ‚Üê Video c√≥ landmarks
        
        process_single_video(
            video_path=VIDEO_PATH,
            output_csv=OUTPUT_CSV,
            show_video=True,        # Hi·ªÉn th·ªã video trong khi x·ª≠ l√Ω
            save_video=False,       # L∆∞u video c√≥ landmarks (t·ªën th·ªùi gian!)
            output_video_path=OUTPUT_VIDEO
        )
    
    # OPTION 2: X·ª≠ l√Ω c·∫£ th∆∞ m·ª•c video
    else:
        # V√≠ d·ª•: X·ª≠ l√Ω th∆∞ m·ª•c video "warning" (b·ªánh tim)
        process_video_folder(
            folder_path="cambientim/warning_videos",  # ‚Üê Th∆∞ m·ª•c ch·ª©a video warning
            output_folder="cambientim/warning_csv",    # ‚Üê Th∆∞ m·ª•c l∆∞u CSV
            label_name="normal",                       # ‚Üê T√™n nh√£n
            show_video=False,                          # Kh√¥ng hi·ªÉn th·ªã (x·ª≠ l√Ω nhanh h∆°n)
            save_videos=False                          # Kh√¥ng l∆∞u video
        )
        
        # X·ª≠ l√Ω th∆∞ m·ª•c video "normal" (b√¨nh th∆∞·ªùng)
        process_video_folder(
            folder_path="cambientim/normal_videos",
            output_folder="cambientim/normal_csv",
            label_name="normal",
            show_video=False,
            save_videos=False
        )
    
    print(f"\n{'='*80}")
    print("üéâ HO√ÄN TH√ÄNH T·∫§T C·∫¢!")
    print(f"{'='*80}")